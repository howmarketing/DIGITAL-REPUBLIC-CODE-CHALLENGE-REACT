{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nconst doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n  _s();\n\n  const [area, setArea] = useState(0);\n  useEffect;\n  const fatherElement = target.parentNode;\n  const wallWidth = fatherElement.querySelector('#width');\n  const wallHeight = fatherElement.querySelector('#height');\n  const numberWindows = fatherElement.querySelector('#windows');\n  const numberDoors = fatherElement.querySelector('#doors');\n  const uselessArea = numberDoors.value * doors + windows * numberWindows.value;\n  const totalArea = wallHeight.value + wallWidth.value;\n\n  if (uselessArea / totalArea >= 1 / 2) {\n    window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    return;\n  }\n\n  const utilArea = totalArea - uselessArea;\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área útil desta parede é de ' + utilArea + ' m2';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_s(ShowingWallSize, \"IzfWvVHWmawHLRnxutcE/CfOQg4=\");\n\n_c = ShowingWallSize;\n\nconst CheckingDoors = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n\n  if (targetValue > 0) {\n    const fatherElement = target.parentNode;\n    const wallHeight = fatherElement.querySelector('#height');\n\n    if (wallHeight.value < 2.2) {\n      window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n    }\n  }\n\n  CheckingWallSize(e);\n};\n\n_c2 = CheckingDoors;\n\nconst CheckingWallSize = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n  let invalidMeasure = false;\n\n  if (targetValue < 1 || targetValue > 15) {\n    invalidMeasure = true;\n    window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n  }\n\n  ShowingWallSize(invalidMeasure, target); // const fatherElement = target.parentNode;\n  // const wallWidth = fatherElement.querySelector('#width');\n  // const wallHeight = fatherElement.querySelector('#height');\n  // const measure = fatherElement.querySelector('h2');\n  // if (measure) measure.remove();\n  // if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n  //     const wallArea = document.createElement('h2');\n  //     wallArea.innerText = '';\n  //     wallArea.innerText = 'A área desta parede é de ' + (wallHeight.value * wallWidth.value) + ' m2';\n  //     fatherElement.appendChild(wallArea);\n  // }\n};\n\n_c3 = CheckingWallSize;\nexport { CheckingWallSize, CheckingDoors };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ShowingWallSize\");\n$RefreshReg$(_c2, \"CheckingDoors\");\n$RefreshReg$(_c3, \"CheckingWallSize\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/CheckingWallSize.js"],"names":["React","useState","useEffect","doors","windows","ShowingWallSize","invalidMeasure","target","area","setArea","fatherElement","parentNode","wallWidth","querySelector","wallHeight","numberWindows","numberDoors","uselessArea","value","totalArea","window","alert","measure","remove","utilArea","wallArea","document","createElement","innerText","appendChild","CheckingDoors","e","targetValue","parseFloat","CheckingWallSize"],"mappings":"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","sourcesContent":["import React, {useState, useEffect } from \"react\";\n\nconst doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n    const [area, setArea] = useState(0);\n\n    useEffect\n\n    const fatherElement = target.parentNode;\n    const wallWidth = fatherElement.querySelector('#width');\n    const wallHeight = fatherElement.querySelector('#height');\n    const numberWindows = fatherElement.querySelector('#windows');\n    const numberDoors = fatherElement.querySelector('#doors');\n    const uselessArea = numberDoors.value * doors + windows * numberWindows.value;\n    const totalArea = wallHeight.value + wallWidth.value;\n    if (uselessArea / totalArea >= 1/2) {\n        window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n        const measure = fatherElement.querySelector('h2');\n        if (measure) measure.remove();\n        return;\n    }\n    const utilArea = totalArea - uselessArea;\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área útil desta parede é de ' + (utilArea) + ' m2';\n        fatherElement.appendChild(wallArea);\n    }\n}\n\nconst CheckingDoors = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    if (targetValue > 0) {\n        const fatherElement = target.parentNode;\n        const wallHeight = fatherElement.querySelector('#height');\n        if (wallHeight.value < 2.2) {\n            window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n        }\n    }\n    CheckingWallSize (e);\n}\n\nconst CheckingWallSize = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    let invalidMeasure = false;\n    if (targetValue < 1 || targetValue > 15) {\n        invalidMeasure = true;\n        window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n    }\n    ShowingWallSize(invalidMeasure, target);\n    // const fatherElement = target.parentNode;\n    // const wallWidth = fatherElement.querySelector('#width');\n    // const wallHeight = fatherElement.querySelector('#height');\n    // const measure = fatherElement.querySelector('h2');\n    // if (measure) measure.remove();\n    // if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    //     const wallArea = document.createElement('h2');\n    //     wallArea.innerText = '';\n    //     wallArea.innerText = 'A área desta parede é de ' + (wallHeight.value * wallWidth.value) + ' m2';\n    //     fatherElement.appendChild(wallArea);\n    // }\n};\n\nexport { CheckingWallSize, CheckingDoors };"]},"metadata":{},"sourceType":"module"}