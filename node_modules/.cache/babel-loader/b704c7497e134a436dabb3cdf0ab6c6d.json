{"ast":null,"code":"const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\ndocument.addEventListener(\"DOMContentLoaded\", function (event) {\n  const calculateButton = document.querySelector('#calculateButton');\n  calculateButton.addEventListener('mouseout', function () {\n    calculateButton.setAttribute('disabled', 'false');\n  });\n  calculateButton.addEventListener('mouseover', function () {\n    const wallMeasures = document.querySelectorAll('#width, #height');\n    console.log(wallMeasures);\n    let wallSizes;\n\n    for (let index = 0; index < wallMeasures.length; index += 1) {\n      if (wallMeasures[index].value) {\n        console.log(temp);\n        wallSizes.push(temp);\n      } else {\n        window.alert('É necessário preencher a largura e altura de todas as paredes.');\n      }\n    }\n\n    console.log(wallSizes);\n\n    if (wallMeasures.value.every === Number) {\n      calculateButton.setAttribute('disabled', 'false');\n    } else {\n      calculateButton.setAttribute('disabled', 'true');\n      window.alert('É necessário preencher a largura e altura de todas as paredes.');\n      return;\n    }\n\n    ; //     wallMeasures.forEach((measure) => {\n    //         if ((measure.value).every === 'number') {\n    //             calculateButton.setAttribute('disabled', 'false');\n    //         } else {\n    //             calculateButton.setAttribute('disabled', 'true');\n    //             // window.alert('É necessário preencher a largura e altura de todas as paredes.')\n    //             return;\n    //         };\n    // })\n  });\n});\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n  const fatherElement = target.parentNode;\n  let wallWidth = fatherElement.querySelector('#width').value;\n  if (!wallWidth) wallWidth = 0;\n  console.log(wallWidth);\n  let wallHeight = fatherElement.querySelector('#height').value;\n  if (!wallHeight) wallHeight = 0;\n  console.log(wallHeight);\n  let numberWindows = fatherElement.querySelector('#windows').value;\n  if (!numberWindows) numberWindows = 0;\n  console.log(numberWindows);\n  let numberDoors = fatherElement.querySelector('#doors').value;\n  if (!numberDoors) numberDoors = 0;\n  console.log(numberDoors);\n  let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n  const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n\n  if (uselessArea / totalArea >= 1 / 2) {\n    window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    return;\n  }\n\n  if (!(uselessArea > 0)) {\n    uselessArea = 0;\n  }\n\n  const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área útil desta parede é de ' + utilArea.toFixed(2) + ' m²';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_c = ShowingWallSize;\n\nconst CheckingDoors = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n\n  if (targetValue > 0 && targetValue.id === 'doors') {\n    const fatherElement = target.parentNode;\n    const wallHeight = fatherElement.querySelector('#height');\n\n    if (wallHeight.value < 2.2) {\n      window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n    }\n  }\n\n  CheckingWallSize(e);\n};\n\n_c2 = CheckingDoors;\n\nconst CheckingWallSize = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n  let invalidMeasure = false;\n\n  if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n    invalidMeasure = true;\n    window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n  }\n\n  ShowingWallSize(invalidMeasure, target);\n};\n\n_c3 = CheckingWallSize;\nexport { CheckingWallSize, CheckingDoors };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ShowingWallSize\");\n$RefreshReg$(_c2, \"CheckingDoors\");\n$RefreshReg$(_c3, \"CheckingWallSize\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/CheckingWallSize.js"],"names":["doors","windows","document","addEventListener","event","calculateButton","querySelector","setAttribute","wallMeasures","querySelectorAll","console","log","wallSizes","index","length","value","temp","push","window","alert","every","Number","ShowingWallSize","invalidMeasure","target","fatherElement","parentNode","wallWidth","wallHeight","numberWindows","numberDoors","uselessArea","parseFloat","totalArea","measure","remove","utilArea","wallArea","createElement","innerText","toFixed","appendChild","CheckingDoors","e","targetValue","id","CheckingWallSize"],"mappings":"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","sourcesContent":["const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n    const calculateButton = document.querySelector('#calculateButton');\n    \n    calculateButton.addEventListener('mouseout', function () {\n        calculateButton.setAttribute('disabled', 'false');\n    });\n    calculateButton.addEventListener('mouseover', function () {\n        const wallMeasures = document.querySelectorAll('#width, #height');\n        console.log(wallMeasures);\n    \n        let wallSizes;\n    \n        for (let index = 0; index < wallMeasures.length; index += 1) {\n            if ((wallMeasures[index]).value) {\n                console.log(temp);\n                wallSizes.push(temp);\n            } else {\n                window.alert('É necessário preencher a largura e altura de todas as paredes.')\n            }\n        }\n        console.log(wallSizes);\n        if ((wallMeasures.value).every === Number) {\n            calculateButton.setAttribute('disabled', 'false');\n        } else {\n            calculateButton.setAttribute('disabled', 'true');\n            window.alert('É necessário preencher a largura e altura de todas as paredes.')\n            return;\n        };\n    //     wallMeasures.forEach((measure) => {\n    //         if ((measure.value).every === 'number') {\n    //             calculateButton.setAttribute('disabled', 'false');\n    //         } else {\n    //             calculateButton.setAttribute('disabled', 'true');\n    //             // window.alert('É necessário preencher a largura e altura de todas as paredes.')\n    //             return;\n    //         };\n    // })\n  });\n});\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n    \n    const fatherElement = target.parentNode;\n    let wallWidth = fatherElement.querySelector('#width').value;\n    if (!wallWidth) wallWidth = 0;\n    console.log(wallWidth);\n    let wallHeight = fatherElement.querySelector('#height').value;\n    if (!wallHeight) wallHeight = 0;\n    console.log(wallHeight);\n    let numberWindows = fatherElement.querySelector('#windows').value;\n    if (!numberWindows) numberWindows = 0;\n    console.log(numberWindows);\n    let numberDoors = fatherElement.querySelector('#doors').value;\n    if (!numberDoors) numberDoors = 0;\n    console.log(numberDoors);\n    let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n    const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n    if (uselessArea / totalArea >= 1/2) {\n        window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n        const measure = fatherElement.querySelector('h2');\n        if (measure) measure.remove();\n        return;\n    }\n    if (!(uselessArea > 0)) {\n        uselessArea = 0;\n    }\n    const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área útil desta parede é de ' + (utilArea.toFixed(2)) + ' m²';\n        fatherElement.appendChild(wallArea);\n    }\n}\n\nconst CheckingDoors = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    if (targetValue > 0 && targetValue.id === 'doors') {\n        const fatherElement = target.parentNode;\n        const wallHeight = fatherElement.querySelector('#height');\n        if (wallHeight.value < 2.2) {\n            window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n        }\n    }\n    CheckingWallSize (e);\n}\n\nconst CheckingWallSize = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    let invalidMeasure = false;\n    if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n        invalidMeasure = true;\n        window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n    }\n    ShowingWallSize(invalidMeasure, target);\n};\n\nexport { CheckingWallSize, CheckingDoors };"]},"metadata":{},"sourceType":"module"}