{"ast":null,"code":"const ShowingWallSize = (invalidMeasure, target) => {\n  const fatherElement = target.parentNode;\n  const wallWidth = fatherElement.querySelector('#width');\n  const wallHeight = fatherElement.querySelector('#height');\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área desta parede é de ' + wallHeight.value * wallWidth.value + ' m2';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_c = ShowingWallSize;\n\nconst CheckingWallSize = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n  let invalidMeasure = false;\n\n  if (targetValue < 1 || targetValue > 15) {\n    invalidMeasure = true;\n    window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n  }\n\n  ShowingWallSize = (invalidMeasure, target);\n  const fatherElement = target.parentNode;\n  const wallWidth = fatherElement.querySelector('#width');\n  const wallHeight = fatherElement.querySelector('#height');\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área desta parede é de ' + wallHeight.value * wallWidth.value + ' m2';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_c2 = CheckingWallSize;\nexport default CheckingWallSize;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ShowingWallSize\");\n$RefreshReg$(_c2, \"CheckingWallSize\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/CheckingWallSize.js"],"names":["ShowingWallSize","invalidMeasure","target","fatherElement","parentNode","wallWidth","querySelector","wallHeight","measure","remove","value","wallArea","document","createElement","innerText","appendChild","CheckingWallSize","e","targetValue","parseFloat","window","alert"],"mappings":"AACA,MAAMA,eAAe,GAAG,CAACC,cAAD,EAAiBC,MAAjB,KAA4B;AAChD,QAAMC,aAAa,GAAGD,MAAM,CAACE,UAA7B;AACA,QAAMC,SAAS,GAAGF,aAAa,CAACG,aAAd,CAA4B,QAA5B,CAAlB;AACA,QAAMC,UAAU,GAAGJ,aAAa,CAACG,aAAd,CAA4B,SAA5B,CAAnB;AACA,QAAME,OAAO,GAAGL,aAAa,CAACG,aAAd,CAA4B,IAA5B,CAAhB;AACA,MAAIE,OAAJ,EAAaA,OAAO,CAACC,MAAR;;AACb,MAAIF,UAAU,CAACG,KAAX,GAAmB,CAAnB,IAAwBL,SAAS,CAACK,KAAV,GAAkB,CAA1C,IAA+CT,cAAc,KAAK,KAAtE,EAA6E;AACzE,UAAMU,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,SAAT,GAAqB,EAArB;AACAH,IAAAA,QAAQ,CAACG,SAAT,GAAqB,8BAA+BP,UAAU,CAACG,KAAX,GAAmBL,SAAS,CAACK,KAA5D,GAAqE,KAA1F;AACAP,IAAAA,aAAa,CAACY,WAAd,CAA0BJ,QAA1B;AACH;AACJ,CAZD;;KAAMX,e;;AAcN,MAAMgB,gBAAgB,GAAIC,CAAD,IAAO;AAC5B,QAAMf,MAAM,GAAGe,CAAC,CAACf,MAAjB;AACA,QAAMgB,WAAW,GAAGC,UAAU,CAACjB,MAAM,CAACQ,KAAR,CAA9B;AACA,MAAIT,cAAc,GAAG,KAArB;;AACA,MAAIiB,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAG,EAArC,EAAyC;AACrCjB,IAAAA,cAAc,GAAG,IAAjB;AACAmB,IAAAA,MAAM,CAACC,KAAP,CAAa,gEAAb;AACH;;AACDrB,EAAAA,eAAe,IAAIC,cAAc,EAAEC,MAApB,CAAf;AACA,QAAMC,aAAa,GAAGD,MAAM,CAACE,UAA7B;AACA,QAAMC,SAAS,GAAGF,aAAa,CAACG,aAAd,CAA4B,QAA5B,CAAlB;AACA,QAAMC,UAAU,GAAGJ,aAAa,CAACG,aAAd,CAA4B,SAA5B,CAAnB;AACA,QAAME,OAAO,GAAGL,aAAa,CAACG,aAAd,CAA4B,IAA5B,CAAhB;AACA,MAAIE,OAAJ,EAAaA,OAAO,CAACC,MAAR;;AACb,MAAIF,UAAU,CAACG,KAAX,GAAmB,CAAnB,IAAwBL,SAAS,CAACK,KAAV,GAAkB,CAA1C,IAA+CT,cAAc,KAAK,KAAtE,EAA6E;AACzE,UAAMU,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,IAAvB,CAAjB;AACAF,IAAAA,QAAQ,CAACG,SAAT,GAAqB,EAArB;AACAH,IAAAA,QAAQ,CAACG,SAAT,GAAqB,8BAA+BP,UAAU,CAACG,KAAX,GAAmBL,SAAS,CAACK,KAA5D,GAAqE,KAA1F;AACAP,IAAAA,aAAa,CAACY,WAAd,CAA0BJ,QAA1B;AACH;AACJ,CApBD;;MAAMK,gB;AAsBN,eAAeA,gBAAf","sourcesContent":["\nconst ShowingWallSize = (invalidMeasure, target) => {\n    const fatherElement = target.parentNode;\n    const wallWidth = fatherElement.querySelector('#width');\n    const wallHeight = fatherElement.querySelector('#height');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área desta parede é de ' + (wallHeight.value * wallWidth.value) + ' m2';\n        fatherElement.appendChild(wallArea);\n    }\n}\n\nconst CheckingWallSize = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    let invalidMeasure = false;\n    if (targetValue < 1 || targetValue > 15) {\n        invalidMeasure = true;\n        window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n    }\n    ShowingWallSize = (invalidMeasure, target);\n    const fatherElement = target.parentNode;\n    const wallWidth = fatherElement.querySelector('#width');\n    const wallHeight = fatherElement.querySelector('#height');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área desta parede é de ' + (wallHeight.value * wallWidth.value) + ' m2';\n        fatherElement.appendChild(wallArea);\n    }\n};\n\nexport default CheckingWallSize;"]},"metadata":{},"sourceType":"module"}