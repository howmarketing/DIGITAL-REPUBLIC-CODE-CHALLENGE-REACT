{"ast":null,"code":"const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\nconst wallMeasures = document.querySelectorAll('#width', '#height');\nconsole.log(WallMeasures);\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n  const fatherElement = target.parentNode;\n  let wallWidth = fatherElement.querySelector('#width').value;\n  if (!wallWidth) wallWidth = 0;\n  console.log(wallWidth);\n  let wallHeight = fatherElement.querySelector('#height').value;\n  if (!wallHeight) wallHeight = 0;\n  console.log(wallHeight);\n  let numberWindows = fatherElement.querySelector('#windows').value;\n  if (!numberWindows) numberWindows = 0;\n  console.log(numberWindows);\n  let numberDoors = fatherElement.querySelector('#doors').value;\n  if (!numberDoors) numberDoors = 0;\n  console.log(numberDoors);\n  let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n  const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n\n  if (uselessArea / totalArea >= 1 / 2) {\n    window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    return;\n  }\n\n  if (!(uselessArea > 0)) {\n    uselessArea = 0;\n  }\n\n  const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área útil desta parede é de ' + utilArea.toFixed(2) + ' m²';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_c = ShowingWallSize;\n\nconst CheckingDoors = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n\n  if (targetValue > 0 && targetValue.id === 'doors') {\n    const fatherElement = target.parentNode;\n    const wallHeight = fatherElement.querySelector('#height');\n\n    if (wallHeight.value < 2.2) {\n      window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n    }\n  }\n\n  CheckingWallSize(e);\n};\n\n_c2 = CheckingDoors;\n\nconst CheckingWallSize = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n  let invalidMeasure = false;\n\n  if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n    invalidMeasure = true;\n    window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n  }\n\n  ShowingWallSize(invalidMeasure, target);\n};\n\n_c3 = CheckingWallSize;\nexport { CheckingWallSize, CheckingDoors };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ShowingWallSize\");\n$RefreshReg$(_c2, \"CheckingDoors\");\n$RefreshReg$(_c3, \"CheckingWallSize\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/CheckingWallSize.js"],"names":["doors","windows","wallMeasures","document","querySelectorAll","console","log","WallMeasures","ShowingWallSize","invalidMeasure","target","fatherElement","parentNode","wallWidth","querySelector","value","wallHeight","numberWindows","numberDoors","uselessArea","parseFloat","totalArea","window","alert","measure","remove","utilArea","wallArea","createElement","innerText","toFixed","appendChild","CheckingDoors","e","targetValue","id","CheckingWallSize"],"mappings":"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","sourcesContent":["const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\nconst wallMeasures = document.querySelectorAll('#width', '#height');\nconsole.log(WallMeasures)\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n    \n    const fatherElement = target.parentNode;\n    let wallWidth = fatherElement.querySelector('#width').value;\n    if (!wallWidth) wallWidth = 0;\n    console.log(wallWidth);\n    let wallHeight = fatherElement.querySelector('#height').value;\n    if (!wallHeight) wallHeight = 0;\n    console.log(wallHeight);\n    let numberWindows = fatherElement.querySelector('#windows').value;\n    if (!numberWindows) numberWindows = 0;\n    console.log(numberWindows);\n    let numberDoors = fatherElement.querySelector('#doors').value;\n    if (!numberDoors) numberDoors = 0;\n    console.log(numberDoors);\n    let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n    const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n    if (uselessArea / totalArea >= 1/2) {\n        window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n        const measure = fatherElement.querySelector('h2');\n        if (measure) measure.remove();\n        return;\n    }\n    if (!(uselessArea > 0)) {\n        uselessArea = 0;\n    }\n    const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área útil desta parede é de ' + (utilArea.toFixed(2)) + ' m²';\n        fatherElement.appendChild(wallArea);\n    }\n}\n\nconst CheckingDoors = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    if (targetValue > 0 && targetValue.id === 'doors') {\n        const fatherElement = target.parentNode;\n        const wallHeight = fatherElement.querySelector('#height');\n        if (wallHeight.value < 2.2) {\n            window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n        }\n    }\n    CheckingWallSize (e);\n}\n\nconst CheckingWallSize = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    let invalidMeasure = false;\n    if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n        invalidMeasure = true;\n        window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n    }\n    ShowingWallSize(invalidMeasure, target);\n};\n\nexport { CheckingWallSize, CheckingDoors };"]},"metadata":{},"sourceType":"module"}