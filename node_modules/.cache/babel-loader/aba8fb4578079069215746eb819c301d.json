{"ast":null,"code":"const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n  const fatherElement = target.parentNode;\n  const wallWidth = fatherElement.querySelector('#width');\n  const wallHeight = fatherElement.querySelector('#height');\n  const numberWindows = fatherElement.querySelector('#windows');\n  const numberDoors = fatherElement.querySelector('#doors');\n  let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n  const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n\n  if (uselessArea / totalArea >= 1 / 2) {\n    window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    return;\n  }\n\n  if (!(uselessArea > 0)) {\n    uselessArea = 0;\n  }\n\n  const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n  const measure = fatherElement.querySelector('h2');\n  if (measure) measure.remove();\n\n  if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n    const wallArea = document.createElement('h2');\n    wallArea.innerText = '';\n    wallArea.innerText = 'A área útil desta parede é de ' + utilArea.toFixed(2) + ' m2';\n    fatherElement.appendChild(wallArea);\n  }\n};\n\n_c = ShowingWallSize;\n\nconst CheckingDoors = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n\n  if (targetValue > 0 && targetValue.id === 'door') {\n    const fatherElement = target.parentNode;\n    const wallHeight = fatherElement.querySelector('#height');\n\n    if (wallHeight.value < 2.2) {\n      window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n    }\n  }\n\n  CheckingWallSize(e);\n};\n\n_c2 = CheckingDoors;\n\nconst CheckingWallSize = e => {\n  const target = e.target;\n  const targetValue = parseFloat(target.value);\n  let invalidMeasure = false;\n\n  if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n    invalidMeasure = true;\n    window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n  }\n\n  ShowingWallSize(invalidMeasure, target);\n};\n\n_c3 = CheckingWallSize;\nexport { CheckingWallSize, CheckingDoors };\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ShowingWallSize\");\n$RefreshReg$(_c2, \"CheckingDoors\");\n$RefreshReg$(_c3, \"CheckingWallSize\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/CheckingWallSize.js"],"names":["doors","windows","ShowingWallSize","invalidMeasure","target","fatherElement","parentNode","wallWidth","querySelector","wallHeight","numberWindows","numberDoors","uselessArea","parseFloat","value","totalArea","window","alert","measure","remove","utilArea","wallArea","document","createElement","innerText","toFixed","appendChild","CheckingDoors","e","targetValue","id","CheckingWallSize"],"mappings":"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","sourcesContent":["const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\n\nconst ShowingWallSize = (invalidMeasure, target) => {\n    \n    const fatherElement = target.parentNode;\n    const wallWidth = fatherElement.querySelector('#width');\n    const wallHeight = fatherElement.querySelector('#height');\n    const numberWindows = fatherElement.querySelector('#windows');\n    const numberDoors = fatherElement.querySelector('#doors');\n    let uselessArea = parseFloat(numberDoors.value) * parseFloat(doors) + parseFloat(windows) * parseFloat(numberWindows.value);\n    const totalArea = parseFloat(wallHeight.value) * parseFloat(wallWidth.value);\n    if (uselessArea / totalArea >= 1/2) {\n        window.alert('A área de portas e janelas não pode ser maior que 50% do total da parede');\n        const measure = fatherElement.querySelector('h2');\n        if (measure) measure.remove();\n        return;\n    }\n    if (!(uselessArea > 0)) {\n        uselessArea = 0;\n    }\n    const utilArea = parseFloat(totalArea) - parseFloat(uselessArea);\n    const measure = fatherElement.querySelector('h2');\n    if (measure) measure.remove();\n    if (wallHeight.value > 0 && wallWidth.value > 0 && invalidMeasure === false) {\n        const wallArea = document.createElement('h2');\n        wallArea.innerText = '';\n        wallArea.innerText = 'A área útil desta parede é de ' + (utilArea.toFixed(2)) + ' m2';\n        fatherElement.appendChild(wallArea);\n    }\n}\n\nconst CheckingDoors = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    if (targetValue > 0 && targetValue.id === 'door') {\n        const fatherElement = target.parentNode;\n        const wallHeight = fatherElement.querySelector('#height');\n        if (wallHeight.value < 2.2) {\n            window.alert('Nenhuma parede com porta pode ter menos que 2,20m de altura');\n        }\n    }\n    CheckingWallSize (e);\n}\n\nconst CheckingWallSize = (e) => {\n    const target = e.target;\n    const targetValue = parseFloat(target.value);\n    let invalidMeasure = false;\n    if ((targetValue < 1 || targetValue > 15) && target.id === 'height') {\n        invalidMeasure = true;\n        window.alert('Nenhuma parede pode ter menos de 1 metro nem mais de 15 metros');\n    }\n    ShowingWallSize(invalidMeasure, target);\n};\n\nexport { CheckingWallSize, CheckingDoors };"]},"metadata":{},"sourceType":"module"}