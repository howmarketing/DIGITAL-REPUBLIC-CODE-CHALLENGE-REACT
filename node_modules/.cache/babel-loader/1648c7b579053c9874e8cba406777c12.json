{"ast":null,"code":"const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\nconst liter = parseInt(5);\n\nconst CalculationInk = () => {\n  const wallWidth = document.querySelectorAll('#width');\n  const wallHeight = document.querySelectorAll('#height');\n  const numberWindows = document.querySelectorAll('#windows');\n  const numberDoors = document.querySelectorAll('#doors');\n  const App = document.querySelector('.App');\n  let subTotalArea = 0;\n  let totalAreaDoors = 0;\n  let totalAreaWindows = 0;\n\n  for (let index = 0; index < 4; index += 1) {\n    subTotalArea += parseFloat(wallHeight[index].value) * parseFloat(wallWidth[index].value);\n  }\n\n  for (let index = 0; index < numberWindows.length; index += 1) {\n    totalAreaWindows += parseFloat(numberWindows[index].value) * parseFloat(windows);\n  }\n\n  for (let index = 0; index < numberDoors.length; index += 1) {\n    totalAreaDoors += parseFloat(numberDoors[index].value) * parseFloat(doors);\n  }\n\n  let totalArea = parseFloat(subTotalArea) - parseFloat(totalAreaDoors) - parseFloat(totalAreaWindows);\n  console.log(subTotalArea);\n  console.log(totalAreaWindows);\n  console.log(totalAreaDoors);\n  console.log(totalArea);\n  const measure = document.querySelectorAll('h2');\n\n  if (measure) {\n    measure.forEach(item => item.remove());\n  }\n\n  const wallArea = document.createElement('h2');\n  wallArea.innerText = `A área total a ser pintada é de ${totalArea.toFixed(2)} m2 \\n\n        e será necessário ${totalArea / liter} de tinta para pintar`;\n  App.appendChild(wallArea);\n};\n\n_c = CalculationInk;\nexport default CalculationInk;\n\nvar _c;\n\n$RefreshReg$(_c, \"CalculationInk\");","map":{"version":3,"sources":["/home/marcelofcd/Documentos/GitLab/Desafio Digital Republic/DIGITAL-REPUBLIC-CODE-CHALLENGE/ink-calculator/src/functions/calculatingInk.js"],"names":["doors","windows","liter","parseInt","CalculationInk","wallWidth","document","querySelectorAll","wallHeight","numberWindows","numberDoors","App","querySelector","subTotalArea","totalAreaDoors","totalAreaWindows","index","parseFloat","value","length","totalArea","console","log","measure","forEach","item","remove","wallArea","createElement","innerText","toFixed","appendChild"],"mappings":"AAAA,MAAMA,KAAK,GAAG,KAAK,GAAnB;AACA,MAAMC,OAAO,GAAG,IAAI,GAApB;AACA,MAAMC,KAAK,GAAGC,QAAQ,CAAC,CAAD,CAAtB;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAEzB,QAAMC,SAAS,GAAGC,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,CAAlB;AACA,QAAMC,UAAU,GAAGF,QAAQ,CAACC,gBAAT,CAA0B,SAA1B,CAAnB;AACA,QAAME,aAAa,GAAGH,QAAQ,CAACC,gBAAT,CAA0B,UAA1B,CAAtB;AACA,QAAMG,WAAW,GAAGJ,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,CAApB;AACA,QAAMI,GAAG,GAAGL,QAAQ,CAACM,aAAT,CAAuB,MAAvB,CAAZ;AACA,MAAIC,YAAY,GAAG,CAAnB;AACA,MAAIC,cAAc,GAAG,CAArB;AACA,MAAIC,gBAAgB,GAAG,CAAvB;;AACA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG,CAA5B,EAA+BA,KAAK,IAAI,CAAxC,EAA2C;AACvCH,IAAAA,YAAY,IAAII,UAAU,CAACT,UAAU,CAACQ,KAAD,CAAV,CAAkBE,KAAnB,CAAV,GAAsCD,UAAU,CAACZ,SAAS,CAACW,KAAD,CAAT,CAAiBE,KAAlB,CAAhE;AACH;;AACD,OAAK,IAAIF,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,aAAa,CAACU,MAA1C,EAAkDH,KAAK,IAAI,CAA3D,EAA8D;AAC1DD,IAAAA,gBAAgB,IAAIE,UAAU,CAACR,aAAa,CAACO,KAAD,CAAb,CAAqBE,KAAtB,CAAV,GAAyCD,UAAU,CAAChB,OAAD,CAAvE;AACH;;AACD,OAAK,IAAIe,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,WAAW,CAACS,MAAxC,EAAgDH,KAAK,IAAI,CAAzD,EAA4D;AACxDF,IAAAA,cAAc,IAAIG,UAAU,CAACP,WAAW,CAACM,KAAD,CAAX,CAAmBE,KAApB,CAAV,GAAuCD,UAAU,CAACjB,KAAD,CAAnE;AACH;;AACD,MAAIoB,SAAS,GAAGH,UAAU,CAACJ,YAAD,CAAV,GAA2BI,UAAU,CAACH,cAAD,CAArC,GAAwDG,UAAU,CAACF,gBAAD,CAAlF;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYT,YAAZ;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYP,gBAAZ;AACAM,EAAAA,OAAO,CAACC,GAAR,CAAYR,cAAZ;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,QAAMG,OAAO,GAAGjB,QAAQ,CAACC,gBAAT,CAA0B,IAA1B,CAAhB;;AACA,MAAIgB,OAAJ,EAAa;AACTA,IAAAA,OAAO,CAACC,OAAR,CAAiBC,IAAD,IAAUA,IAAI,CAACC,MAAL,EAA1B;AACH;;AACG,QAAMC,QAAQ,GAAGrB,QAAQ,CAACsB,aAAT,CAAuB,IAAvB,CAAjB;AACAD,EAAAA,QAAQ,CAACE,SAAT,GAAsB,mCAAmCT,SAAS,CAACU,OAAV,CAAkB,CAAlB,CAAsB;AACvF,4BAA6BV,SAAS,GAAGlB,KAAO,uBADxC;AAEAS,EAAAA,GAAG,CAACoB,WAAJ,CAAgBJ,QAAhB;AACP,CAhCD;;KAAMvB,c;AAkCN,eAAeA,cAAf","sourcesContent":["const doors = .8 * 1.9;\nconst windows = 2 * 1.2;\nconst liter = parseInt(5);\n\nconst CalculationInk = () => {\n    \n    const wallWidth = document.querySelectorAll('#width');\n    const wallHeight = document.querySelectorAll('#height');\n    const numberWindows = document.querySelectorAll('#windows');\n    const numberDoors = document.querySelectorAll('#doors');\n    const App = document.querySelector('.App');\n    let subTotalArea = 0;\n    let totalAreaDoors = 0;\n    let totalAreaWindows = 0;\n    for( let index = 0; index < 4; index += 1) {\n        subTotalArea += parseFloat(wallHeight[index].value) * parseFloat(wallWidth[index].value);\n    }\n    for( let index = 0; index < numberWindows.length; index += 1) {\n        totalAreaWindows += parseFloat(numberWindows[index].value) * parseFloat(windows);\n    }\n    for( let index = 0; index < numberDoors.length; index += 1) {\n        totalAreaDoors += parseFloat(numberDoors[index].value) * parseFloat(doors);\n    }\n    let totalArea = parseFloat(subTotalArea) - parseFloat(totalAreaDoors) - parseFloat(totalAreaWindows);\n    console.log(subTotalArea)\n    console.log(totalAreaWindows)\n    console.log(totalAreaDoors)\n    console.log(totalArea)\n    const measure = document.querySelectorAll('h2');\n    if (measure) { \n        measure.forEach((item) => item.remove());\n    }    \n        const wallArea = document.createElement('h2');\n        wallArea.innerText = `A área total a ser pintada é de ${ totalArea.toFixed(2) } m2 \\n\n        e será necessário ${ totalArea / liter } de tinta para pintar`;\n        App.appendChild(wallArea);\n}\n\nexport default CalculationInk;"]},"metadata":{},"sourceType":"module"}